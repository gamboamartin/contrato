<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\contrato\controllers;

use config\generales;
use gamboamartin\administrador\models\adm_session;
use gamboamartin\errores\errores;
use JsonException;
use stdClass;

class controlador_adm_session extends \gamboamartin\controllers\controlador_adm_session {
    public bool $existe_msj = false;
    public string $include_menu = '';
    public string $mensaje_html = '';

    public string $options_folio = '';

    /**
     * Funcion de controlador donde se ejecutaran siempre que haya un acceso denegado
     * @param bool $header Si header es true cualquier error se mostrara en el html y cortara la ejecucion del sistema
     *              En false retornara un array si hay error y un string con formato html
     * @param bool $ws Si ws es true retornara el resultado en formato de json
     * @return array vacio siempre
     */
    public function denegado(bool $header, bool $ws = false): array
    {

        return array();

    }


    public function inicio(bool $aplica_template = false, bool $header = true, bool $ws = false): string|array
    {

        $session_em3 = '';
        if(isset($_GET['session_em3'])){
            $session_em3 = $_GET['session_em3'];
        }
        $end_point = (new generales())->api_em3;
        $end_point = $end_point."?method=get_session&session_id=".$session_em3;


        $params = array();
        $params['numero_empresa'] = 1;
        $result = $this->make_post_request($end_point,$params);
        if(isset($result->error)){
            if((int)$result->error === 1){
                $error = (new errores())->error('Error al obtener datos de session',$result);
                print_r($error);
                die('ERROR');
            }
        }

        //print_r($result);

        $template =  parent::inicio($aplica_template, false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje:  'Error al generar template',data: $template, header: $header, ws: $ws);
        }


        $this->include_menu = (new generales())->path_base;
        $this->include_menu .= 'templates/inicio.php';

        $end_point = (new generales())->api_em3;
        $end_point = $end_point."?method=get_folios";

        $params = array();
        $params['numero_empresa'] = 1;
        $params['codPlaza'] = $result[0]->plaza_codigo_sap;
        //$params['codPlaza'] = 'P007';
        $params['empleado_codigo'] = $result[0]->ohem_empID;
        //$params['empleado_codigo'] = '25184';
        $folios = $this->make_post_request($end_point, $params);

       // print_r($folios);;exit;

        if(isset($folios->error)){
            if((int)$folios->error === 1){
                $error = (new errores())->error('Error al obtener folios',$folios);
                print_r($error);
                die('ERROR');
            }
        }

        $options_folio = '';
        foreach ($folios as $folio){
            $folio = (object)$folio;
            $options_folio.="<option value='$folio->folio_con_fila_id'>$folio->folio_con_U_Serie $folio->folio_con_fila_U_Folio $folio->folio_con_fila_U_Asistente</option>";

        }

        $this->options_folio = $options_folio;

        return $template;
    }


    final public function loguea(bool $header, bool $ws = false, string $accion_header = 'login',
                                 string $seccion_header = 'adm_session'): array|stdClass
    {

        $data_original = $_POST;
        $_POST['user'] = (new generales())->adm_usuario_user_init;
        $_POST['password'] = (new generales())->adm_usuario_password_init;
        $loguea = parent::loguea(header: false); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje:  'Error al loguear',data: $loguea, header: $header, ws: $ws);
        }

        $end_point = (new generales())->api_em3;
        $end_point = $end_point."?method=login";

        $params = array();
        $params['numero_empresa'] = 1;
        $params['username'] = $data_original['user'];
        $params['password'] = $data_original['password'];
        $result = $this->make_post_request($end_point, $params);

        if(isset($result->error)){
            if((int)$result->error === 1){
                $error = (new errores())->error('Error al loguearse en em3',$result);
                print_r($error);
                die('ERROR');
            }
        }


        if($header) {
            header("Location: ./index.php?seccion=adm_session&accion=inicio&session_em3=$result->session_id&mensaje=Bienvenido&tipo_mensaje=exito&session_id=" . (new generales())->session_id);
            exit;
        }

        return $result;
    }


    final function make_post_request(string $url, array $data):array|stdClass {
        $ch = curl_init($url); // Initialize cURL session

        // Convert data to JSON (recommended for APIs)
        $jsonData = json_encode($data);

        // Set cURL options
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true, // Return response as string
            CURLOPT_HTTPHEADER => [
                'Content-Type: application/json', // Indicate JSON data
                'Content-Length: ' . strlen($jsonData) // Important for JSON
            ],
            CURLOPT_POST => true, // Enable POST request
            CURLOPT_POSTFIELDS => $jsonData, // Set POST data
            CURLOPT_SSL_VERIFYPEER => true,  // Verify SSL certificate (important for security)
            CURLOPT_SSL_VERIFYHOST => 2,   // Verify SSL hostname (important for security)
            CURLOPT_TIMEOUT => 30         // Set timeout (in seconds)
        ]);

        // Execute the request
        $response = curl_exec($ch);

        if (curl_errno($ch)) {
            $error = curl_error($ch);
            curl_close($ch);
            return ['error' => 1,'mensaje'=>'Error al ejecutar api '.$url.$error]; // Return error information
        }

        // Close cURL session
        curl_close($ch);

        // Decode JSON response (if applicable)
        // true for associative array

        // Return the response data

        return json_decode($response);
    }


    /**
     * Funcion de controlador donde se ejecutaran los elementos de session/login
     *
     * @param bool $header Si header es true cualquier error se mostrara en el html y cortara la ejecucion del sistema
     *              En false retornara un array si hay error y un string con formato html
     * @param bool $ws Si ws es true retornara el resultado en formato de json
     * @return string|array string = html array = error
     */
    public function login(bool $header = true, bool $ws = false): stdClass|array
    {
        $login = parent::login($header, $ws); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje:  'Error al generar template',data: $login, header: $header, ws: $ws);
        }

        $this->mensaje_html = '';
        if(isset($_GET['mensaje']) && $_GET['mensaje'] !==''){
            $mensaje = trim($_GET['mensaje']);
            if($mensaje !== ''){
                $this->mensaje_html = $mensaje;
                $this->existe_msj = true;
            }
        }

        $this->include_menu .= 'templates/login.php';

        return $login;

    }



}
